import cv2
import numpy as np
from matplotlib import cm
import pandas as pd
from czifile import CziFile
from scipy.ndimage import zoom
from io import BytesIO
import hashlib
import tempfile
import threading
import tkinter as tk
from PIL import Image, ImageTk, ImageDraw, ImageFont, ImageOps
from functools import partial
import os
import subprocess
import cv2
import math
import keyboard
from tkinter import Listbox, Canvas
import json
from tkinter import filedialog, messagebox, PhotoImage, Toplevel, scrolledtext, StringVar, BooleanVar, Tk, simpledialog 
from tkinter.ttk import Button, Label, Entry, OptionMenu, Style, Checkbutton, Frame, Progressbar, Scale, Scrollbar
from readlif.reader import LifFile


class ThumbnailViewer:
    def __init__(self, parent, images, 
                 comments=None, image_ids=None,
                 replaced_image_names = None,
                 on_single_click=lambda path: None, 
                 on_double_click=lambda path: None, 
                 on_selection_change=lambda selected_ids: None,
                 open_image_func=Image.open, 
                 max_per_page=None, width=500, height=150):
        
        self.parent = parent
        self.images = images
        self.comments = comments
        self.image_ids = image_ids
        self.on_selection_change = on_selection_change
        
        self.replaced_image_names = replaced_image_names
        
        self.on_single_click = on_single_click
        self.on_double_click = on_double_click
        self.open_image_func = open_image_func
        self.max_per_page = max_per_page
        self.width = width
        self.height = height
        
        self.progress_window = None
        self.progress_bar = None
        self.progress_label = None
        self.empty_comments = False

        self.cancel_loading = False

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.current_page = 0
        if self.max_per_page is None:
            self.max_per_page = len(self.images)

        self.TEMP_FILE = os.path.join(tempfile.gettempdir(), 'agr_thumbnails')
        if not os.path.exists(self.TEMP_FILE):
            os.makedirs(self.TEMP_FILE)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –∫–ª–∏–∫–∞
        self.start_x = 0
        self.start_y = 0
        self.canvas_offset_x = 0
        self.canvas_offset_y = 0
        self.last_clicked_thumbnail = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∂–∞—Ç–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        self.selected_images = set()  # –ù–∞–±–æ—Ä –ø—É—Ç–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        self._setup_ui()
        self._load_page_images(0)
        
    def display_selected_ids(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ ID –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        if self.image_ids is None:
            self.selected_ids_label.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            return

        if not self.selected_images:
            self.selected_ids_label.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–π
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_to_id = {img: img_id for img, img_id in zip(self.images, self.image_ids)}

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        selected_ids_num = [image_to_id[img] for img in self.selected_images if img in image_to_id]
        selected_ids_num.sort(key=lambda x: list(self.image_ids).index(x))


        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ ID –≤ —Å—Ç—Ä–æ–∫–∏
        selected_ids = [str(id) for id in selected_ids_num]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        max_displayed_ids = 30  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        if len(selected_ids) > max_displayed_ids:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å –Ω–∞—á–∞–ª–∞ –∏ —Å –∫–æ–Ω—Ü–∞
            start_count = (max_displayed_ids // 2)  # –ß–∏—Å–ª–∞ —Å –Ω–∞—á–∞–ª–∞
            end_count = (max_displayed_ids // 2)    # –ß–∏—Å–ª–∞ —Å –∫–æ–Ω—Ü–∞

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –Ω–∞—á–∞–ª–æ–º, —Ç—Ä–æ–µ—Ç–æ—á–∏—è–º–∏ –∏ –∫–æ–Ω—Ü–æ–º
            displayed_ids = ", ".join(selected_ids[:start_count]) + " ... " + ", ".join(selected_ids[-end_count:])
        else:
            displayed_ids = ", ".join(selected_ids)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.selected_ids_label.config(text=f"Selected IDs: {displayed_ids}")
        self.selected_ids_label.pack(side=tk.BOTTOM, fill=tk.X)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.on_selection_change(selected_ids_num)


    def _setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
        self.thumbnail_frame = Frame(self.parent)
        self.thumbnail_frame.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä –∏ scrollbar
        self.canvas = Canvas(self.thumbnail_frame, width=self.width, height=self.height, highlightthickness=0)
        self.scrollbar = tk.Scrollbar(self.thumbnail_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.canvas.config(xscrollcommand=self.scrollbar.set)

        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

        self.thumbnail_inner_frame = Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.thumbnail_inner_frame, anchor="nw")
        self.thumbnail_inner_frame.bind("<MouseWheel>", self.on_mouse_wheel)

        self.images = [image for image in self.images if os.path.exists(image)]
        
        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –¥–ª–∏–Ω—É
        if self.comments is None:
            self.comments = ['' for _ in self.images]  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            self.empty_comments = True
        else:
            if len(self.comments) != len(self.images):
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.prev_button = Button(self.thumbnail_frame, text="ü°∏", command=self.show_previous_page)
        self.next_button = Button(self.thumbnail_frame, text="ü°∫", command=self.show_next_page)

        self.prev_button.pack(side=tk.LEFT, padx=5)
        self.next_button.pack(side=tk.RIGHT, padx=5)

        # –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID
        self.selected_ids_label = Label(self.thumbnail_frame, text="")
        self.selected_ids_label.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=5)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.select_all_button = Button(self.thumbnail_frame, text="Select all", command=self.select_all_images)
        self.select_all_button.pack(side=tk.LEFT, padx=5)
    
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ (Toplevel), —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —ç—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç
        self.root = self.parent.winfo_toplevel()

        # –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à —Å —ç—Ç–∏–º –æ–∫–Ω–æ–º
        self.root.bind("<Control-a>", self.on_ctrl_a)
        self.root.bind("<Control-A>", self.on_ctrl_a)
        self.root.bind("<Control-Shift-a>", self.on_ctrl_shift_a)
        self.root.bind("<Control-Shift-A>", self.on_ctrl_shift_a)

    def get_thumbnail_filename(self, image_path):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        modification_time = int(os.path.getmtime(image_path))
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –æ—Ç –ø—É—Ç–∏
        base_hash = hashlib.md5(image_path.encode()).hexdigest()
        # –°–∫–ª–µ–∏–≤–∞–µ–º —Ö—ç—à –∏ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        file_name = f"{base_hash}_{modification_time}.png"
        return os.path.join(self.TEMP_FILE, file_name)

    def clear_thumbnails(self):
        try:
            if self.thumbnail_inner_frame.winfo_exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—Ä–µ–π–º
                for widget in self.thumbnail_inner_frame.winfo_children():
                    widget.destroy()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        except tk.TclError as e:
            print(f"Error during clearing thumbnails: {e}")

    def add_comment_to_image(self, image, comment):
        """–ù–∞–Ω–æ—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º, –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º 14."""
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB, –µ—Å–ª–∏ –æ–Ω–æ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if image.mode != 'RGB':
            image = image.convert('RGB')
            
        img_copy = image.copy()
        draw = ImageDraw.Draw(img_copy)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ä–∏—Ñ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å Arial —Å —Ä–∞–∑–º–µ—Ä–æ–º 14 –∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        try:
            font = ImageFont.truetype("arialbd.ttf", 14)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–∏—Ä–Ω—ã–π Arial
        except IOError:
            font = ImageFont.load_default()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º font.getbbox() –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        text_bbox = draw.textbbox((0, 0), comment, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (–Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞)
        padding = 5
        text_x, text_y = 10, 10  # –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        background_x1 = text_x - padding
        background_y1 = text_y - padding
        background_x2 = text_x + text_width + padding
        background_y2 = text_y + text_height + padding
        
        # –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
        draw.rectangle([background_x1, background_y1, background_x2, background_y2], fill=(0, 0, 0))

        # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –±–µ–ª—ã–π
        text_color = (255, 255, 255)
        
        # –ù–∞–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        draw.text((text_x, text_y), comment, font=font, fill=text_color)

        return img_copy

    def on_mouse_wheel(self, event):
        if event.delta > 0:
            self.canvas.xview_scroll(-1, "units")  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ª–µ–≤–æ
        else:
            self.canvas.xview_scroll(1, "units")   # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ø—Ä–∞–≤–æ

    def on_mouse_press(self, event):        
        """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏."""
        self.start_x = event.x
        self.start_y = event.y
        self.canvas_offset_x = self.canvas.canvasx(0)
        self.canvas_offset_y = self.canvas.canvasy(0)

    def on_mouse_drag(self, event):
        """–ò–∑–º–µ–Ω—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ö–æ–ª—Å—Ç–∞ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é –º—ã—à–∏."""
        delta_x = self.start_x - event.x
        self.canvas.xview_moveto((self.canvas_offset_x + delta_x) / self.canvas.bbox("all")[2])

    def on_mouse_release(self, event, img_path, thumbnail_label):
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        highlight_color = theme_manager.get_theme_highlight() or "blue"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–ª–∏ —Å–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –∫–ª–∏–∫–æ–º –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º."""
        delta_x = event.x - self.start_x
        delta_y = event.y - self.start_y
        movement = (delta_x**2 + delta_y**2)**0.5

        if movement < 5:  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏—à–∞ Ctrl
            if event.state & 0x0004:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏—à–∞ Ctrl
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if img_path in self.selected_images:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    self.selected_images.remove(img_path)
                    thumbnail_label.config(borderwidth=0, relief="flat")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    self.selected_images.add(img_path)
                    thumbnail_label.config(borderwidth=4, relief="flat", background = highlight_color)                
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for widget in self.thumbnail_inner_frame.winfo_children():
                    lbl = widget.children.get('!label')
                    if lbl:
                        lbl.config(borderwidth=0, relief="flat")
                self.selected_images.clear()

                # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É
                self.selected_images.add(img_path)
                thumbnail_label.config(borderwidth=4, relief="flat", background = highlight_color)
                self.last_clicked_thumbnail = thumbnail_label
                
            self.display_selected_ids()

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_single_click
            self.on_single_click(img_path)
        else:
            # –≠—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

    def on_ctrl_a(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ Ctrl+A –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        focus_widget = self.root.focus_get()
        if focus_widget and str(focus_widget).startswith(str(self.root)):
            self.select_all_visible()
        return "break"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è

    def on_ctrl_shift_a(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ Ctrl+Shift+A –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        focus_widget = self.root.focus_get()
        if focus_widget and str(focus_widget).startswith(str(self.root)):
            self.select_all_images()
        return "break"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è


    def select_all_visible(self):
        """–í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∑ —Ç–µ–º—ã."""
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        highlight_color = theme_manager.get_theme_highlight() or "blue"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–ª–∏ —Å–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        for widget in self.thumbnail_inner_frame.winfo_children():
            thumbnail_label = widget.children.get('!label')
            if thumbnail_label:
                img_path = thumbnail_label.img_path
                self.selected_images.add(img_path)
                thumbnail_label.config(borderwidth=4, relief="flat", background=highlight_color)
                self.display_selected_ids()

    def select_all_images(self):
        """–í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö."""
        self.selected_images = set(self.images)  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.select_all_visible()
        self.display_selected_ids()
        #self.update_thumbnails_selection()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    def update_thumbnails_selection(self):        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        highlight_color = theme_manager.get_theme_highlight() or "blue"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–ª–∏ —Å–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        for widget in self.thumbnail_inner_frame.winfo_children():
            thumbnail_label = widget.children.get('!label')
            if thumbnail_label:
                img_path = thumbnail_label.img_path
                if img_path in self.selected_images:
                    thumbnail_label.config(borderwidth=4, relief="flat", background = highlight_color)                    
                else:
                    thumbnail_label.config(borderwidth=0, relief="flat")
                self.display_selected_ids()

    def create_progress_window(self, max_value):
        """
        Create a progress window and a progress bar.
        """
        self.progress_window = initialize_window(self.parent, "Loading Images", 400, 200, icon_path=icon_path)
        
        self.progress_label = Label(self.progress_window, text="Loading images, please wait...")
        self.progress_label.pack(padx=20, pady=10)

        self.progress_bar = Progressbar(self.progress_window, orient="horizontal", length=300, mode="determinate")
        self.progress_bar.pack(padx=20, pady=10)
        self.progress_bar["maximum"] = max_value

        cancel_button = Button(self.progress_window, text="Cancel", command=self.cancel_progress)
        cancel_button.pack(pady=10)

    def close_progress_window(self):
        if self.progress_window is not None:
            self.progress_window.destroy()
            self.progress_window = None

    def cancel_progress(self):
        self.cancel_loading = True
        self.close_progress_window()

    def _load_page_images(self, start_index):
        threading.Thread(target=self._load_images, args=(start_index,)).start()

    def _load_images(self, start_index):
        self.cancel_loading = False
        self.clear_thumbnails()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        highlight_color = theme_manager.get_theme_highlight() or "blue"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–ª–∏ —Å–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        end_index = min(start_index + self.max_per_page, len(self.images))
        page_image_count = end_index - start_index  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        self.create_progress_window(page_image_count)

        for idx_in_page, img_path in enumerate(self.images[start_index:end_index], start=start_index):
            if self.cancel_loading:
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ thumbnail_inner_frame –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç–æ–≤
            if not self.thumbnail_inner_frame.winfo_exists():
                break

            thumbnail_path = self.get_thumbnail_filename(img_path)
            if os.path.exists(thumbnail_path):
                img = Image.open(thumbnail_path)
            else:
                img = self.open_image_func(img_path)
                img.thumbnail((150, 150))
                img.save(thumbnail_path, format='PNG')

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            if not self.empty_comments:
                img = self.add_comment_to_image(img, self.comments[idx_in_page])

            img_tk = ImageTk.PhotoImage(img)

            thumbnail_container = Frame(self.thumbnail_inner_frame)
            thumbnail_label = Label(thumbnail_container, image=img_tk)
            thumbnail_label.image = img_tk
            thumbnail_label.img_path = img_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –∞—Ç—Ä–∏–±—É—Ç–µ
            thumbnail_label.pack(side=tk.TOP, padx=5, pady=5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if img_path in self.selected_images:
                thumbnail_label.config(borderwidth=4, relief="flat", background = highlight_color)            
            else:
                thumbnail_label.config(borderwidth=0, relief="flat")
            self.display_selected_ids()

            if not self.replaced_image_names: # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                file_name = os.path.basename(img_path)
            else:
                file_name = self.replaced_image_names[start_index+idx_in_page]
                
            file_label = Label(thumbnail_container, text=file_name, font=("Arial", 10), wraplength=100)
            file_label.pack(side=tk.TOP)

            thumbnail_container.pack(side=tk.LEFT, padx=5, pady=5)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –∫–ª–∏–∫–∞ –∫ –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º
            thumbnail_label.bind("<ButtonPress-1>", self.on_mouse_press)
            thumbnail_label.bind("<B1-Motion>", self.on_mouse_drag)
            thumbnail_label.bind("<ButtonRelease-1>", partial(self.on_mouse_release, img_path=img_path, thumbnail_label=thumbnail_label))
            thumbnail_label.bind("<Double-Button-1>", lambda event, path=img_path: self.on_double_click(path))

            thumbnail_container.bind("<MouseWheel>", self.on_mouse_wheel)
            thumbnail_label.bind("<MouseWheel>", self.on_mouse_wheel)
            file_label.bind("<MouseWheel>", self.on_mouse_wheel)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if self.progress_bar:
                self.progress_bar["value"] = idx_in_page - start_index + 1  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                self.progress_label.config(text=f"Loading image {idx_in_page - start_index + 1} of {page_image_count}")
                self.parent.update_idletasks()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        self.close_progress_window()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ canvas –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º bbox
        if self.canvas.winfo_exists():
            self.canvas.config(scrollregion=self.canvas.bbox("all"))
            
        self.thumbnail_inner_frame.update_idletasks()

        self.update_buttons()
        #self.update_thumbnails_selection()

    def show_next_page(self):
        if (self.current_page + 1) * self.max_per_page < len(self.images):
            self.current_page += 1

            self._load_page_images(self.current_page * self.max_per_page)

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.canvas.xview_moveto(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ –Ω–∞—á–∞–ª–æ

    def show_previous_page(self):
        if self.current_page > 0:
            self.current_page -= 1

            self._load_page_images(self.current_page * self.max_per_page)

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ –∫–æ–Ω–µ—Ü, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.canvas.xview_moveto(1)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ –∫–æ–Ω–µ—Ü

    def update_buttons(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.prev_button.winfo_exists():
            if self.current_page == 0:
                self.prev_button.config(state=tk.DISABLED)
            else:
                self.prev_button.config(state=tk.NORMAL)

        if self.next_button.winfo_exists():
            if (self.current_page + 1) * self.max_per_page >= len(self.images):
                self.next_button.config(state=tk.DISABLED)
            else:
                self.next_button.config(state=tk.NORMAL)

        if len(self.images) <= self.max_per_page:
            if self.prev_button.winfo_exists():
                self.prev_button.config(state=tk.DISABLED)
            if self.next_button.winfo_exists():
                self.next_button.config(state=tk.DISABLED)

    def destroy(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏ –æ—Ç–≤—è–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
        # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.root.unbind("<Control-a>")
        self.root.unbind("<Control-A>")
        self.root.unbind("<Control-Shift-a>")
        self.root.unbind("<Control-Shift-A>")

        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
        self.thumbnail_frame.destroy()



        
def create_excel_snapshot_to_image(excel_file, sheet_name=None, rows=10, cols=5):
    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    df = pd.read_excel(excel_file, sheet_name=sheet_name)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    if isinstance(df, dict):
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if sheet_name is not None:
            df = df[sheet_name]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            df = list(df.values())[0]
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –∫–æ–ª–æ–Ω–∫—É —Å —Ç—Ä–æ–µ—Ç–æ—á–∏—è–º–∏
    df_snapshot = df.iloc[:rows, :cols]
    df_snapshot["..."] = "..."  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç—Ä–æ–µ—Ç–æ—á–∏—è–º–∏

    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df_snapshot = df_snapshot.fillna("")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç—Ä–æ–µ—Ç–æ—á–∏—è–º–∏
    df_snapshot.loc[len(df_snapshot)] = ["..." for _ in range(cols + 1)]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype("arial.ttf", 16)  # Arial —Å —Ä–∞–∑–º–µ—Ä–æ–º 16
    
    # –†–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    line_spacing = 30  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    column_spacing = 150  # –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    num_cols = df_snapshot.shape[1]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    
    text_height = (rows + 2) * line_spacing  # –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    text_width = column_spacing * num_cols  # –®–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.new('RGB', (text_width, text_height), 'white')
    draw = ImageDraw.Draw(image)
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
    x_start, y_start = 10, 10
    text_offset = 5  # –û—Ç—Å—Ç—É–ø —Ç–µ–∫—Å—Ç–∞ –æ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
    row_colors = ["white", "#D3D3D3"]  # –ë–µ–ª—ã–π –∏ —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    header_y = y_start
    header_color = "#A9A9A9"  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    draw.rectangle([0, header_y, text_width, header_y + line_spacing], fill=header_color)
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    for j, col_name in enumerate(df_snapshot.columns):
        x = x_start + j * column_spacing
        draw.text((x + text_offset, header_y), str(col_name), font=font, fill='black')
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —Ñ–æ–Ω–∞
    for i, row in enumerate(df_snapshot.itertuples(index=False, name=None)):
        y = y_start + (i + 1) * line_spacing  # –°–¥–≤–∏–≥ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        row_color = row_colors[i % 2]
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        draw.rectangle([0, y, text_width, y + line_spacing], fill=row_color)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Å —Ñ–æ–Ω–æ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç—Ä–æ–∫–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ–ø—É—Å—Ç–∞—è
        for j, cell in enumerate(row):
            x = x_start + j * column_spacing
            
            if cell != "":  # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ–ø—É—Å—Ç–∞—è, —Ä–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                draw.rectangle([x, y, x + column_spacing, y + line_spacing], fill=row_color)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º, –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ–ø—É—Å—Ç–∞—è
            draw.text((x + text_offset, y), str(cell), font=font, fill='black')
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö
    for j in range(num_cols + 1):
        x = x_start + j * column_spacing
        draw.line([(x, y_start), (x, text_height)], fill='black', width=2)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ BytesIO –¥–ª—è –≤—ã–≤–æ–¥–∞
    img_byte_arr = BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    return Image.open(img_byte_arr)


def normalize_channel(channel_data):
    """–ù–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 0 –¥–æ 255"""
    channel_min = channel_data.min()
    channel_max = channel_data.max()
    if channel_max > channel_min:
        normalized_data = (channel_data - channel_min) / (channel_max - channel_min) * 255
    else:
        normalized_data = np.zeros_like(channel_data)
    return normalized_data.astype(np.uint8)

def create_combined_image(image_data, channels, slices, scale, max_channel, max_slice):
    """–°–æ–∑–¥–∞–µ—Ç RGB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–ª–∞–π–¥–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —Å—Ä–µ–∑—ã
    valid_channels = [ch for ch in channels if ch < max_channel]  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ out of bounds
    valid_slices = [sl for sl in slices if sl < max_slice]        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ä–µ–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ out of bounds

    sample_slices = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º—É–º—ã –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º —Å—Ä–µ–∑–∞–º
    for ch in valid_channels:
        sample_slice = np.max(image_data[0, 0, ch, valid_slices, :, :, 0], axis=0)
        sample_slices.append(sample_slice)
    
    # –ï—Å–ª–∏ scale –Ω–µ —Ä–∞–≤–µ–Ω 1, —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if scale != 1.0:
        sample_slices = [zoom(slice_data, (scale, scale), order=1) for slice_data in sample_slices]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    combined_image = np.zeros((*sample_slices[0].shape, 3), dtype='uint8')
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ (RGB –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
    colormap = cm.get_cmap('rainbow', len(valid_channels))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ—Ä–±–∞—Ä –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ RGB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, sample_slice in enumerate(sample_slices):
        normalized_slice = normalize_channel(sample_slice)
        color = np.array(colormap(i)[:3]) * 255  # –ü–æ–ª—É—á–∞–µ–º RGB —Ü–≤–µ—Ç –∏–∑ –∫–æ–ª–æ—Ä–±–∞—Ä–∞
        for j in range(3):  # RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            combined_image[:, :, j] += (normalized_slice * color[j] / 255).astype(np.uint8)

    return combined_image

def process_czi_image(file_path, channels=None, slices=None, scale=1.0):
    """CZI image processing with optional arguments for selecting channels, slides and scale"""
    # Open the CZI file and get the data
    with CziFile(file_path) as czi:
        image_data = czi.asarray()
        if len(image_data.shape) == 8:  # If there are tiles
            image_data = image_data[:, :, 0, :, :, :, :, :]
        max_slice = image_data.shape[3]
        max_channel = image_data.shape[2]
    
    # If channels or slides are not specified, use all
    if channels is None:
        channels = list(range(max_channel))  # Use all channels
    if slices is None:
        slices = list(range(max_slice))  # Use all slides
    
    # Call a function to create a combined image from selected channels and slides
    combined_image = create_combined_image(image_data, channels, slices, scale, max_channel, max_slice)
    img = Image.fromarray(combined_image)
    
    return img

def process_tif_image(file_path):
    img = Image.open(file_path)
    
    img_stack = []        
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ—é –≤ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    for i in range(img.n_frames):
        img.seek(i)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–π –≤ –º–∞—Å—Å–∏–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ 8-–±–∏—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        layer = np.array(img, dtype=np.uint16)
        layer_max = layer.max()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if layer_max > 0:
            layer_normalized = (layer * (255.0 / layer_max)).astype(np.uint8)
        else:
            layer_normalized = layer.astype(np.uint8)  # –ï—Å–ª–∏ max=0, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ uint8
            
        # –î—É–±–ª–∏—Ä—É–µ–º —Å–ª–æ–π –ø–æ —Ç—Ä–µ–º –∫–∞–Ω–∞–ª–∞–º –¥–ª—è RGB
        rgb_layer = np.stack([layer_normalized] * 3, axis=-1)
        img_stack.append(rgb_layer)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–∏ –≤ –æ–¥–Ω–æ RGB-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–∫—Å–∏–º—É–º—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
    combined_array = np.max(np.stack(img_stack), axis=0)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PIL-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º RGB
    combined_img = Image.fromarray(combined_array, mode='RGB')
    if combined_img.mode != 'RGB':
        combined_img = combined_img.convert('RGB')
    
    return combined_img

def process_lif_image(file_path, scale=0.3):
    lif = LifFile(file_path)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    border_color = (128, 40, 128)  # —Ü–≤–µ—Ç —Ä–∞–º–∫–∏
    border_size = 5  # –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
    pil_images = []
    for img in lif.get_iter_image():
        plane = img.get_plane().convert("RGB")
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        new_size = (int(plane.width * scale), int(plane.height * scale))
        scaled_image = plane.resize(new_size, Image.LANCZOS)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–µ–ª–µ–Ω—É—é —Ä–∞–º–∫—É
        bordered_image = ImageOps.expand(scaled_image, border=border_size, fill=border_color)
        pil_images.append(bordered_image)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
    rows = int(len(pil_images) ** 0.5)
    cols = (len(pil_images) + rows - 1) // rows

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–º–∫–∏
    width, height = pil_images[0].size
    collage_width = cols * width
    collage_height = rows * height

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ö–æ–ª—Å—Ç –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
    collage = Image.new('RGB', (collage_width, collage_height))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–º–∫–æ–π –≤ –∫–æ–ª–ª–∞–∂–µ
    for i, img in enumerate(pil_images):
        x = (i % cols) * width
        y = (i // cols) * height
        collage.paste(img, (x, y))

    return collage

def process_synCatch_image(file_path):
    if file_path.endswith('.czi'):
        return process_czi_image(file_path)
    elif file_path.endswith('.tif'):
        return process_tif_image(file_path)
    elif file_path.endswith('.lif'):
        return process_lif_image(file_path)

# Function to invert an image
def invert_image(image):
    return 255 - image

def simplify_contour(coords, epsilon=1.0):
    """
    Simplify the ROI outline using the Douglas-Pecker algorithm to reduce the number of points.
    epsilon: Parameter to control the simplification level.
    """
    coords = np.array(coords, dtype=np.float32)
    approx_coords = cv2.approxPolyDP(coords, epsilon, True)  # True means the loop is closed
    return approx_coords.reshape(-1, 2) # Convert back to 2D array

def create_region_mask(image_shape, coords, simplify=True, epsilon=1.0):
    """
    Create a binary mask for a given set of coordinates.
    Optional simplification of the contour can be applied.
    """
    # Optionally simplify the coordinates to reduce the number of points
    if simplify:
        coords = simplify_contour(coords, epsilon)

    # Initialize a blank mask with the same height and width as the input image
    mask = np.zeros(image_shape[:2], dtype=np.uint8)  # Single-channel mask (grayscale)

    # Fill the mask with the polygon defined by the simplified coordinates
    cv2.fillPoly(mask, [np.int32(coords)], 1)
    
    return mask


class ColorCycler:
    def __init__(self, num_colors=10):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É –∏–∑ N —Ü–≤–µ—Ç–æ–≤
        self.palette = self.generate_color_palette(num_colors)
        self.index = 0  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å

    def generate_color_palette(self, num_colors):
        colormap = cm.get_cmap('tab10', num_colors)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ª–∏—Ç—Ä—É 'tab10'
        colors = [tuple((np.array(colormap(i)[:3]) * 255).astype(int)) for i in range(num_colors)]
        return colors

    def get_next_color(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç –ø–æ –∫—Ä—É–≥—É, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω–¥–µ–∫—Å
        color = self.palette[self.index]
        self.index = (self.index + 1) % len(self.palette)  # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        return color    
class guiButton:
    def __init__(self, x, y, width, height, text, callback=None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.callback = callback  # Function that is called when the button is clicked
        self.visible = True

    def draw(self, img):
        if self.visible:
            cv2.rectangle(img, (self.x, self.y), (self.x + self.width, self.y + self.height), (200, 200, 200), -1)
            cv2.putText(img, self.text, (self.x + 10, self.y + 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2, cv2.LINE_AA)

    def is_clicked(self, x, y):
        if self.visible and self.x <= x <= self.x + self.width and self.y <= y <= self.y + self.height:
            if self.callback:
                self.callback()
            return True
        return False



def draw_polygons_on_image(coords_df, scale_factor, color_cycler, img, simplify_contour):
    """
    Function to draw polygons on the image.

    Arguments:
    coords_df -- DataFrame with polygon coordinates
    scale_factor -- scaling factor for the coordinates
    color_cycler -- object to get the color of the polygon
    img -- image where polygons will be drawn
    simplify_contour -- function to simplify polygon coordinates
    """
    # If there are saved polygons, draw them
    if coords_df is not None:
        for col_x in coords_df.columns[::2]:  # Loop through every second column (assumed to be '_x' columns)
            col_y = col_x.replace('_x', '_y')  # Find the corresponding '_y' column
            location_name = col_x.rsplit('_', 1)[0]  # Extract the location name
            
            # Get the coordinates, apply the scaling factor
            coords = coords_df[[col_x, col_y]].values.astype(np.float32) * scale_factor
            # Simplify the coordinates using the provided function
            coords = simplify_contour(coords)
            # Convert the coordinates to integer type
            coords = coords.astype(np.int32)

            # Get the next color from the ColorCycler
            polygon_color = color_cycler.get_next_color()
            # Convert the color to integer tuple
            polygon_color = tuple(map(int, polygon_color))

            # Create a translucent layer for the polygon
            overlay = img.copy()
            # Fill the polygon with the chosen color
            cv2.fillPoly(overlay, [coords], color=polygon_color)
            # Blend the overlay with the original image to add transparency
            cv2.addWeighted(overlay, 0.2, img, 0.8, 0, img)

            # Calculate the center of the polygon
            center_x = int(np.mean(coords[:, 0]))
            center_y = int(np.mean(coords[:, 1]))
            text_position = (center_x, center_y)

            # Display the location name at the center of the polygon
            cv2.putText(img, location_name, text_position, cv2.FONT_HERSHEY_SIMPLEX, 
                        0.6, (255, 255, 255), 2)

    return img



def distance(p1, p2):
    return np.linalg.norm(p1 - p2)

def is_on_edge(point, poly, tolerance=5):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–ª–∏–∫ –Ω–∞ —Ä–µ–±—Ä–æ –ø–æ–ª–∏–≥–æ–Ω–∞
    for i in range(len(poly)):
        next_point = poly[(i + 1) % len(poly)]
        d = np.cross(next_point - poly[i], point - poly[i]) / distance(poly[i], next_point)
        if abs(d) < tolerance:
            # –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–∞ —Ä–µ–±—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–±—Ä–∞ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ —Ä–µ–±—Ä–µ
            vec = next_point - poly[i]
            t = np.dot(point - poly[i], vec) / np.dot(vec, vec)
            if 0 <= t <= 1:
                nearest_point = poly[i] + t * vec
                return i, nearest_point.astype(np.int32)
    return None, None

class PolygonDrawer:
    def __init__(self, rgb_image, scale_factor=1.0, coords_df=None, comments=''):

        self.scale_factor = scale_factor
        self.original_rgb_image = rgb_image
        self.rgb_image = cv2.resize(rgb_image, None, fx=self.scale_factor, fy=self.scale_factor, interpolation=cv2.INTER_LINEAR)
        self.bgr_image = cv2.cvtColor(self.rgb_image, cv2.COLOR_RGB2BGR)
        self.img_copy = self.bgr_image.copy()
        self.comments = comments
         
        self.coords_df = coords_df  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤

        self.points = []
        self.is_drawing = False
        self.tool_selected = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è True –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "Start"
        self.selected_vertex = None  # –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã
        self.dragging = False  # –§–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –≤–µ—Ä—à–∏–Ω—ã
        self.tolerance = 10  # –†–∞–¥–∏—É—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –≤–µ—Ä—à–∏–Ω—É

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.start_button = guiButton(10, 10, 100, 50, 'Start', self.start_drawing)
        self.delete_button = guiButton(10, 70, 100, 50, 'Delete', self.delete_polygon)
        self.select_all_button = guiButton(10, 130, 100, 50, 'Select all', self.select_all)
        self.apply_button = guiButton(10, 190, 100, 50, 'Apply', self.apply_polygon)
        self.cancel_button = guiButton(10, 250, 100, 50, 'Cancel', self.cancel_polygon)
        self.modify_button = guiButton(10, 310, 100, 50, 'Modify', self.modify_selected_polygon)  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        # –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫
        self.cancel_button.visible = True
        self.apply_button.visible = False
        self.delete_button.visible = False
        self.modify_button.visible = False  # –°–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        cv2.namedWindow("Polygon")
        cv2.setMouseCallback("Polygon", self.mouse_callback)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞

    def start_drawing(self):
        """ –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è """
        self.tool_selected = True
        self.start_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Start"
        self.select_all_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Select all"
        self.cancel_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Cancel"
        cv2.setMouseCallback("Polygon", self.mouse_callback)  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
        # print("Draw tool selected")

    def apply_polygon(self):
        original_points = [(int(x / self.scale_factor), int(y / self.scale_factor)) for x, y in self.points]
        cv2.destroyAllWindows()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        return original_points

    def modify_selected_polygon(self):
        """ –£–ø—Ä–æ—â–∞–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ """
        self.points = simplify_contour(self.points, epsilon=1.0)  # –£–ø—Ä–æ—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞
        self.modify_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        cv2.setMouseCallback("Polygon", self.mod_mouse_callback)  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞

    def delete_polygon(self):
        self.points = []  # –û—á–∏—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
        self.tool_selected = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        self.start_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Start"
        self.select_all_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Select all"
        self.delete_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Delete"
        self.apply_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Apply"
        self.modify_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Modify Selected"

    def select_all(self):
        """ –í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–≥–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ """
        height, width = self.bgr_image.shape[:2]
        self.points = [(0, 0), (width - 1, 0), (width - 1, height - 1), (0, height - 1)]
        self.delete_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Delete" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —É–≥–ª–æ–≤
        self.select_all_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Select all"
        self.start_button.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Start"
        self.apply_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Apply"

    def cancel_polygon(self):
        """ –û—Ç–º–µ–Ω—è–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ """
        self.points = []  # –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        cv2.destroyAllWindows()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        return self.points  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    def mouse_callback(self, event, x, y, flags, param):
        """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞ """
        if event == cv2.EVENT_LBUTTONDOWN:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if self.start_button.is_clicked(x, y):
                return
            if self.delete_button.is_clicked(x, y):
                return
            if self.select_all_button.is_clicked(x, y):
                return
            if self.apply_button.is_clicked(x, y):
                return
            if self.cancel_button.is_clicked(x, y):
                return
            if self.modify_button.is_clicked(x, y):
                return

            if self.tool_selected:
                self.is_drawing = True
                self.points = [(x, y)]  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏

        elif event == cv2.EVENT_MOUSEMOVE and flags & cv2.EVENT_FLAG_LBUTTON:
            if self.is_drawing:
                self.points.append((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è

        elif event == cv2.EVENT_LBUTTONUP:
            if self.is_drawing:
                self.is_drawing = False
                if len(self.points) > 1:
                    self.delete_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Delete" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
                    self.apply_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Apply"
                    self.modify_button.visible = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Modify Selected"

    def mod_mouse_callback(self, event, x, y, flags, param):
        """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ """
        
        if event == cv2.EVENT_LBUTTONDOWN:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if self.start_button.is_clicked(x, y):
                return
            if self.delete_button.is_clicked(x, y):
                return
            if self.select_all_button.is_clicked(x, y):
                return
            if self.apply_button.is_clicked(x, y):
                return
            if self.cancel_button.is_clicked(x, y):
                return
            if self.modify_button.is_clicked(x, y):
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –≤–µ—Ä—à–∏–Ω—É –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            for i, point in enumerate(self.points):
                if distance(np.array(point), np.array([x, y])) < self.tolerance:
                    self.selected_vertex = i
                    self.dragging = True
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–±—Ä–æ –ø–æ–ª–∏–≥–æ–Ω–∞
            edge_index, new_vertex = is_on_edge(np.array([x, y]), np.array(self.points))
            if edge_index is not None:
                next_index = (edge_index + 1) % len(self.points)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º self.points –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å insert
                self.points = self.points.tolist()
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
                self.points.insert(next_index, tuple(new_vertex))
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º self.points –æ–±—Ä–∞—Ç–Ω–æ –≤ numpy array
                self.points = np.array(self.points)

        elif event == cv2.EVENT_LBUTTONDBLCLK:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ
            for i, point in enumerate(self.points):
                if distance(np.array(point), np.array([x, y])) < self.tolerance:
                    # –£–¥–∞–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—É
                    self.points = self.points.tolist()
                    self.points.pop(i)
                    self.points = np.array(self.points)
                    return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

        elif event == cv2.EVENT_MOUSEMOVE:
            if self.dragging and self.selected_vertex is not None:
                self.points[self.selected_vertex] = (x, y)

        elif event == cv2.EVENT_LBUTTONUP:
            self.dragging = False
            self.selected_vertex = None

    def run(self):
        while True:
            img = self.img_copy.copy()

            # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
            color_cycler = ColorCycler(num_colors=10)
            img = draw_polygons_on_image(self.coords_df, self.scale_factor, color_cycler, img, simplify_contour)

            # –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏
            self.start_button.draw(img)
            self.delete_button.draw(img)
            self.select_all_button.draw(img)
            self.apply_button.draw(img)
            self.cancel_button.draw(img)
            self.modify_button.draw(img)

            # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å —Ä–∏—Å—É–µ—Ç
            if len(self.points) > 0:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤ numpy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cv2
                polygon_points = np.array(self.points, np.int32)
                
                # –†–∏—Å—É–µ–º –∑–∞–º–∫–Ω—É—Ç—ã–π –ø–æ–ª–∏–≥–æ–Ω (isClosed=True)
                cv2.polylines(img, [polygon_points], isClosed=True, color=(0, 255, 0), thickness=2)

                # –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –≤–µ—Ä—à–∏–Ω–∞—Ö
                for point in self.points:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                    cv2.circle(img, (int(point[0]), int(point[1])), radius=5, color=(0, 255, 0), thickness=-1)  # —Ç–æ—á–∫–∏

            
            ## –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï comments
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞
            text = self.comments  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é comments
            font = cv2.FONT_HERSHEY_SIMPLEX
            font_scale = 0.6
            font_thickness = 1

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –µ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            (text_width, text_height), _ = cv2.getTextSize(text, font, font_scale, font_thickness)
            img_height, img_width = img.shape[:2]
            x = (img_width - text_width) // 2
            y = text_height + 20  # –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è

            # –†–∏—Å—É–µ–º —Å–µ—Ä—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            overlay = img.copy()
            cv2.rectangle(overlay, (x - 10, y - text_height - 10), (x + text_width + 10, y + 10), (128, 128, 128), -1)
            alpha = 0.5  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞ (0 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ, 1 –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ)
            cv2.addWeighted(overlay, alpha, img, 1 - alpha, 0, img)

            # –ù–∞–Ω–æ—Å–∏–º –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö
            cv2.putText(img, text, (x, y), font, font_scale, (255, 255, 255), font_thickness, cv2.LINE_AA)

            # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ img
            cv2.imshow("Polygon", img)

            key = cv2.waitKey(1) & 0xFF

            if key == ord('q') or cv2.getWindowProperty("Polygon", cv2.WND_PROP_VISIBLE) < 1:
                break

        cv2.destroyAllWindows()
        original_points = [(int(x / self.scale_factor), int(y / self.scale_factor)) for x, y in self.points]
        return original_points



class PolygonModifier:
    def __init__(self, rgb_image, scale_factor=1.0, coords_df=None):
        self.scale_factor = scale_factor
        self.rgb_image = cv2.resize(rgb_image, None, fx=self.scale_factor, fy=self.scale_factor, interpolation=cv2.INTER_LINEAR)
        self.bgr_image = cv2.cvtColor(self.rgb_image, cv2.COLOR_RGB2BGR)
        self.img_copy = self.bgr_image.copy()

        self.coords_df = coords_df  # DataFrame —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        self.selected_polygon_name = None
        self.selected_polygon_points = None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button = guiButton(10, 10, 100, 50, 'Start', self.start_selection)
        self.delete_button = guiButton(10, 70, 100, 50, 'Delete', self.delete_polygon)
        self.modify_button = guiButton(10, 130, 100, 50, 'Modify', self.modify_polygon)
        self.cancel_button = guiButton(10, 190, 100, 50, 'Cancel', self.cancel_modification)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ "Delete" –∏ "Modify" —Å–∫—Ä—ã—Ç—ã
        self.delete_button.visible = False
        self.modify_button.visible = False

        cv2.namedWindow("Polygon")
        cv2.setMouseCallback("Polygon", self.handle_mouse)

    def start_selection(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
        self.start_button.visible = False

    def handle_mouse(self, event, x, y, flags, param):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –º—ã—à–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∏–≥–æ–Ω–∞"""
        if event == cv2.EVENT_LBUTTONDOWN:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
            if self.start_button.is_clicked(x, y):
                return
            if self.delete_button.is_clicked(x, y):
                return
            if self.modify_button.is_clicked(x, y):
                return
            if self.cancel_button.is_clicked(x, y):
                return

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
            for col_x in self.coords_df.columns[::2]:
                col_y = col_x.replace('_x', '_y')
                polygon_points = self.coords_df[[col_x, col_y]].values.astype(np.float32) * self.scale_factor

                if cv2.pointPolygonTest(np.array(polygon_points, np.int32), (x, y), False) >= 0:
                    self.selected_polygon_name = col_x.rsplit('_', 1)[0]
                    self.selected_polygon_points = polygon_points
                    self.delete_button.visible = True
                    self.modify_button.visible = True
                    break

    def delete_polygon(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞"""
        if self.selected_polygon_name:
            col_x = f'{self.selected_polygon_name}_x'
            col_y = f'{self.selected_polygon_name}_y'
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ DataFrame
            self.coords_df.drop([col_x, col_y], axis=1, inplace=True)
            cv2.destroyWindow("Polygon")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ

    def modify_polygon(self):
        """–ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        cv2.destroyWindow("Polygon")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ

    def cancel_modification(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.selected_polygon_name = None
        self.selected_polygon_points = None
        cv2.destroyWindow("Polygon")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        while True:
            img = self.img_copy.copy()

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            for col_x in self.coords_df.columns[::2]:
                col_y = col_x.replace('_x', '_y')
                polygon_points = self.coords_df[[col_x, col_y]].values.astype(np.float32) * self.scale_factor
                color = (0, 255, 0) if col_x == f'{self.selected_polygon_name}_x' else (255, 0, 0)
                cv2.polylines(img, [np.array(polygon_points, np.int32)], isClosed=True, color=color, thickness=2)

                # –ü–æ–¥–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª–∏–≥–æ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN
                center_x = int(np.nanmean(polygon_points[:, 0]))
                center_y = int(np.nanmean(polygon_points[:, 1]))
                text_position = (center_x, center_y)
                location_name = col_x.rsplit('_', 1)[0]
                cv2.putText(img, location_name, text_position, cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self.start_button.draw(img)
            self.delete_button.draw(img)
            self.modify_button.draw(img)
            self.cancel_button.draw(img)

            cv2.imshow("Polygon", img)
            key = cv2.waitKey(1) & 0xFF

            if key == ord('q') or cv2.getWindowProperty("Polygon", cv2.WND_PROP_VISIBLE) < 1:
                break

        cv2.destroyAllWindows()

# # Example of using the class
# image_path = r"E:\iMAGES\4 months slide2 slice5\4 months slide2 slice5_Experiment-1271_synaptotag.png"
# rgb_image = cv2.imread(image_path)  # Load the image into BGR
# rgb_image = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2RGB)  # Convert to RGB

# drawer = PolygonDrawer(rgb_image)
# polygon_points = drawer.run()
# print("Coordinates of the polygon:", polygon_points)



class ParallelogramEditor:
    def __init__(self, image, scale_factor=1.0, coords_df=None):
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        self.image = image
        self.scale_factor = scale_factor
        self.coords_df = coords_df # coordinates of other polygons
        
        #self.original_image = image
        self.image = cv2.resize(image, None, fx=self.scale_factor, fy=self.scale_factor, interpolation=cv2.INTER_LINEAR)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ColorCycler
        color_cycler = ColorCycler(num_colors=10)
        self.image = draw_polygons_on_image(self.coords_df, self.scale_factor, color_cycler, self.image, simplify_contour)
        
        self.original_image = self.image.copy()
        self.drawing = False
        self.start_point = None
        self.points = []
        self.rotated_points = []
        self.finished_drawing = False
        self.moving_point = None
        self.rotating = False
        self.center_point = None
        self.initial_angle = 0
        self.dragging = False
        
        # Create a window
        cv2.namedWindow('Image')
        cv2.setMouseCallback('Image', self.draw_parallelogram)

    def rotate_point(self, point, center, angle):
        """Rotates a point around the center by a specified angle."""
        angle_rad = math.radians(angle)
        x_new = int(center[0] + math.cos(angle_rad) * (point[0] - center[0]) - math.sin(angle_rad) * (point[1] - center[1]))
        y_new = int(center[1] + math.sin(angle_rad) * (point[0] - center[0]) + math.cos(angle_rad) * (point[1] - center[1]))
        return (x_new, y_new)

    def draw_polygon(self, img, pts):
        pts = np.array(pts, np.int32)
        pts = pts.reshape((-1, 1, 2))
        cv2.polylines(img, [pts], isClosed=True, color=(0, 255, 0), thickness=2)

    def draw_grid(self, img, points, step_fraction=0.1):
        """Draws a mesh inside a parallelogram."""
        # Break the parallelogram into vectors
        vector_u = np.array(points[1]) - np.array(points[0])
        vector_v = np.array(points[3]) - np.array(points[0])
    
        # Determine the number of steps along each side
        num_steps_x = int(1 / step_fraction)
        num_steps_y = int(1 / step_fraction)
    
        # Draw vertical grid lines
        for i in range(1, num_steps_x):
            step_u = vector_u * (i * step_fraction)
            start_point = np.array(points[0]) + step_u
            end_point = np.array(points[3]) + step_u
            cv2.line(img, tuple(start_point.astype(int)), tuple(end_point.astype(int)), (255, 0, 0), 1)
    
        # Draw horizontal grid lines
        for j in range(1, num_steps_y):
            step_v = vector_v * (j * step_fraction)
            start_point = np.array(points[0]) + step_v
            end_point = np.array(points[1]) + step_v
            cv2.line(img, tuple(start_point.astype(int)), tuple(end_point.astype(int)), (255, 0, 0), 1)


    def draw_parallelogram(self, event, x, y, flags, param):
        if not self.finished_drawing:
            if event == cv2.EVENT_LBUTTONDOWN:
                self.drawing = True
                self.start_point = (x, y)
                self.points = [self.start_point]
                #print('Drawing started')
    
            elif event == cv2.EVENT_MOUSEMOVE and self.drawing:
                self.image = self.original_image.copy()
                end_point = (x, y)
                cv2.rectangle(self.image, self.start_point, end_point, (0, 255, 0), 2)
    
            elif event == cv2.EVENT_LBUTTONUP and self.drawing:
                self.drawing = False
                end_point = (x, y)
                self.points = [self.start_point, (end_point[0], self.start_point[1]), end_point, (self.start_point[0], end_point[1])]
    
                self.finished_drawing = True
                self.center_point = ((self.points[0][0] + self.points[2][0]) // 2, (self.points[0][1] + self.points[2][1]) // 2)
                #print('Drawing stopped')
    
                # Draw a figure
                self.draw_polygon(self.image, self.points)
                self.draw_grid(self.image, self.points)  # Add a grid
    
        else:
            if event == cv2.EVENT_RBUTTONDOWN:
                self.rotating = True
                self.initial_angle = math.degrees(math.atan2(y - self.center_point[1], x - self.center_point[0]))
                #print('Rotation started')
    
            elif event == cv2.EVENT_RBUTTONUP:
                if self.rotating:
                    #print('Rotation stopped')
                    self.rotating = False
                    self.points = self.rotated_points
    
            elif event == cv2.EVENT_LBUTTONDOWN:
                # Determine which vertex is moving or start moving the entire figure
                for i, point in enumerate(self.points):
                    if abs(x - point[0]) < 10 and abs(y - point[1]) < 10:
                        self.moving_point = i
                        #print(f'Started moving point {i}')
                        break
                else:
                    # Check if the click is inside the shape to move the entire shape
                    if self.is_point_inside_polygon((x, y), self.points):
                        self.dragging = True
                        self.drag_start = (x, y)
                        self.original_points = self.points.copy()
                        #print('Started dragging the whole figure')
    
            elif event == cv2.EVENT_MOUSEMOVE:
                if self.moving_point is not None:
                    self.image = self.original_image.copy()
    
                    # Move selected vertex
                    self.points[self.moving_point] = (x, y)
    
                    # Automatic recalculation of point 2
                    if self.moving_point in [0, 1, 3]:
                        vector_01 = np.array(self.points[1]) - np.array(self.points[0])
                        vector_03 = np.array(self.points[3]) - np.array(self.points[0])
                        self.points[2] = tuple(np.array(self.points[0]) + vector_01 + vector_03)
    
                    # Draw only lines 0-1 and 0-3
                    cv2.line(self.image, tuple(self.points[0]), tuple(self.points[1]), (0, 255, 255), 2)  # Yellow color
                    cv2.line(self.image, tuple(self.points[0]), tuple(self.points[3]), (0, 255, 255), 2)  # Yellow color
                    self.draw_grid(self.image, self.points)  # Add a grid
    
                elif self.dragging:
                    # Move the entire shape
                    dx = x - self.drag_start[0]
                    dy = y - self.drag_start[1]
                    self.points = [(px + dx, py + dy) for px, py in self.original_points]
    
                    self.image = self.original_image.copy()
                    self.draw_polygon(self.image, self.points)
                    self.draw_grid(self.image, self.points)  # Add a grid
    
                elif self.rotating:
                    # Calculate the rotation angle
                    current_angle = math.degrees(math.atan2(y - self.center_point[1], x - self.center_point[0]))
                    angle_diff = current_angle - self.initial_angle
                    self.rotated_points = [self.rotate_point(point, self.center_point, angle_diff) for point in self.points]
    
                    self.image = self.original_image.copy()
                    self.draw_polygon(self.image, self.rotated_points)
                    self.draw_grid(self.image, self.rotated_points)  # Add a grid
    
            elif event == cv2.EVENT_LBUTTONUP:
                if self.moving_point is not None:
                    #print(f'Stopped moving point {self.moving_point}')
                    self.moving_point = None
    
                if self.dragging:
                    #print('Stopped dragging the whole figure')
                    self.dragging = False
    
        if keyboard.is_pressed('ctrl') and self.finished_drawing:
            self.image = self.original_image.copy()
            # Draw only lines 0-1 and 0-3
            cv2.line(self.image, tuple(self.points[0]), tuple(self.points[1]), (0, 255, 255), 2)  # Yellow color
            cv2.line(self.image, tuple(self.points[0]), tuple(self.points[3]), (0, 255, 255), 2)  # Yellow color
            # Draw the mesh based on the updated points
            self.draw_grid(self.image, self.points)  # The grid is also in yellow mode
    
    def is_point_inside_polygon(self, point, polygon):
        """Checks if a point is inside a polygon."""
        x, y = point
        n = len(polygon)
        inside = False
        p1x, p1y = polygon[0]
        for i in range(n + 1):
            p2x, p2y = polygon[i % n]
            if y > min(p1y, p2y):
                if y <= max(p1y, p2y):
                    if x <= max(p1x, p2x):
                        if p1y != p2y:
                            xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                        if p1x == p2x or x <= xinters:
                            inside = not inside
            p1x, p1y = p2x, p2y
        return inside
    

    def get_coordinates(self):
        """Returns the current coordinates of the parallelogram, taking into account scaling."""
        if not self.finished_drawing:
            return None
        
        current_coordinates = self.rotated_points if self.rotating else self.points
        # Rescaling coordinates to the original image size
        scaled_coordinates = [(int(x / self.scale_factor), int(y / self.scale_factor)) for x, y in current_coordinates]
        
        return scaled_coordinates


    def run(self):
        while True:
            cv2.imshow('Image', self.image)
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):  # Press 'q' to exit
                break
            # Check for closing the window manually
            if cv2.getWindowProperty("Image", cv2.WND_PROP_VISIBLE) < 1:
                break
        
        cv2.destroyAllWindows()

# # Example of using the class
# if __name__ == "__main__":
#     image_path = r"E:\iMAGES\P21.5.1 slide2 slice4\P21.5.1 slide2 slice4_Experiment-888_comments.png"
#     image = cv2.imread(image_path)
    
#     # Initialize the class with an image
#     editor = ParallelogramEditor(image)
#     editor.run()
#     coords = editor.get_coordinates()
#     print("Final coordinates of the parallelogram:", coords)

def read_metadata_from_file(file_path):
    ads_path = f"{file_path}:syn_catch_metadata"
    if os.path.exists(ads_path):
        with open(ads_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def metadata_to_text(metadata, exclude_keys=None, comments=None):
    exclude_keys = exclude_keys or []
    comments = comments or {}
    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
    filtered_metadata = {key: value for key, value in metadata.items() if key not in exclude_keys}
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    lines = []
    for key, value in filtered_metadata.items():
        line = f"{key}: {value}"
        if key in comments:
            line += f"  # {comments[key]}"
        lines.append(line)
    return "\n".join(lines)
            
class ExperimentWindow:
    def __init__(self, experiment_path, comment=None):
        self.experiment_path = experiment_path
        self.current_image = None
        self.current_image_path = None
        self.first_image_displayed = False
        extension = os.path.splitext(experiment_path)[1]
        self.results_folder = self.experiment_path.replace(extension, "_results")
        self.multiple_pictures_mode = False
        self.next_canvas = 1
        self.current_images = [None, None]  # –î–ª—è —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.current_image_paths = [None, None]

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.top = Toplevel()
        self.top.title("Gallery of Experiment")
        self.top.geometry("1024x768")
        self.top.iconbitmap(icon_path)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞

        
        # –§—Ä–µ–π–º –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
        self.thumbnail_frame = Frame(self.top)

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        self.top.wm_state("zoomed")

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        self.file_name_label = Label(self.top, text="", font=("Arial", 14))

        self.toolbar_frame = Frame(self.top, height=15)

        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.large_image_frame = Frame(self.top)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –º–∞—Å—à—Ç–∞–±–∞ –≤ toolbar_frame
        self.scale_slider = Scale(
            self.toolbar_frame,
            from_=10,
            to=200,
            orient=tk.HORIZONTAL,
            command=self.update_image
        )
        self.scale_slider.set(100)

        # Canvas –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.large_image_canvas = Canvas(self.large_image_frame, width=500, height=400, highlightthickness=0)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è canvas
        self.y_scrollbar = tk.Scrollbar(
            self.large_image_frame, orient=tk.VERTICAL, command=self.large_image_canvas.yview
        )
        self.x_scrollbar = tk.Scrollbar(
            self.large_image_frame, orient=tk.HORIZONTAL, command=self.large_image_canvas.xview
        )

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ canvas
        self.large_image_canvas.bind("<Double-Button-1>", self.on_double_click)
        self.large_image_canvas.bind("<Button-1>", self.on_single_click)

        self.open_folder_button = Button(
            self.toolbar_frame, text="Open Results Folder", command=self.open_results_folder
        )
        self.remove_results_button = Button(
            self.toolbar_frame, text="Clear Results", command=self.remove_results
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Review multiple pictures"
        self.select_multiple_button = Checkbutton(
            self.toolbar_frame, text="Review multiple pictures", command=self.toggle_multiple_pictures_mode,
            variable=tk.BooleanVar(value=False)
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        #self.metadata_label = Label(self.toolbar_frame, text="", font=("Arial", 10), justify=tk.LEFT, anchor="w")
        self.metadata_text, self.metadata_scrollbar = create_metadata_text_field(self.toolbar_frame)

        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.toolbar_frame.pack(fill=tk.BOTH, expand=False)
        self.open_folder_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.remove_results_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.select_multiple_button.pack(side=tk.LEFT, padx=5, pady=5)
        #self.metadata_label.pack(side=tk.LEFT, padx=10)
        self.metadata_text.pack(side=tk.LEFT, padx=10, pady=5)
        self.metadata_scrollbar.pack(side=tk.LEFT, fill=tk.Y)
        self.scale_slider.pack(side=tk.RIGHT, padx=5, pady=5)
        self.file_name_label.pack(pady=5)
        self.large_image_frame.pack(pady=10, fill=tk.BOTH, expand=True)
        self.y_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.x_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        self.large_image_canvas.config(
            xscrollcommand=self.x_scrollbar.set, yscrollcommand=self.y_scrollbar.set
        )
        self.large_image_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.thumbnail_frame.pack(pady=5, fill=tk.BOTH, expand=True)

        self.top.focus_force()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∫–∏ –∫ –±–æ–ª—å—à–æ–º—É canvas
        self.large_image_canvas.bind("<MouseWheel>", self.on_mouse_wheel)
        self.y_scrollbar.bind(
            "<MouseWheel>",
            lambda event: self.on_mouse_wheel_scroll(event, self.large_image_canvas, 'y')
        )
        self.x_scrollbar.bind(
            "<MouseWheel>",
            lambda event: self.on_mouse_wheel_scroll(event, self.large_image_canvas, 'x')
        )

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
        if comment:
            comment_label = Label(self.top, text=comment, font=("Arial", 12), fg="blue")
            comment_label.pack(pady=5)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        images, metadatas = self.get_results_data(self.experiment_path)
         
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é display_thumbnails
        self.display_thumbnails_in_class(images, metadatas)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.top.protocol("WM_DELETE_WINDOW", self.on_close)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –ø–æ –ø—É—Ç–∏ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É
    def get_results_data(self, experiment_path):
        extension = os.path.splitext(experiment_path)[1]
        result_folder = experiment_path.replace(extension, "_results")
        if os.path.exists(result_folder):
            images = [
                os.path.join(result_folder, f)
                for f in os.listdir(result_folder)
                if f.endswith('.png')
            ]
            metadata_texts = []
            for image_path in images:
                metadata = read_metadata_from_file(image_path)
                metadata_texts.append(metadata_to_text(metadata, exclude_keys = ['protocol']))
            return images, metadata_texts
        return [], []

    def display_thumbnails_in_class(self, images, metadatas):
        # sort data by date
        image_metadata_pairs = zip(images, metadatas)
        sorted_pairs = sorted(image_metadata_pairs, key=lambda x: os.path.getctime(x[0]))
        sorted_images, sorted_metadatas = zip(*sorted_pairs)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def on_single_click(path):
            # –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_large_image(path)
            metadata = read_metadata_from_file(path)
            self.display_metadata(metadata)

        def on_double_click(path):            
            pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä ThumbnailViewer, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'thumbnail_viewer'):
            self.thumbnail_viewer.destroy()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ThumbnailViewer
        self.thumbnail_viewer = ThumbnailViewer(
            parent=self.thumbnail_frame,
            images=sorted_images,
            replaced_image_names = sorted_metadatas,
            comments=None,  # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            on_single_click=on_single_click,
            on_double_click=on_double_click,
            open_image_func=Image.open,
            max_per_page=None,  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            width=500,
            height=150,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ thumbnail_inner_frame
        self.thumbnail_viewer.thumbnail_inner_frame.focus_set()


        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        theme_manager.apply_theme(self.top)
        
        
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    def toggle_multiple_pictures_mode(self):
        self.multiple_pictures_mode = not self.multiple_pictures_mode
        if self.multiple_pictures_mode:
            
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            self.display_metadata({})
            
            # –ò–∑–º–µ–Ω—è–µ–º –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–∞–∂–∞—Ç—É—é
            #self.select_multiple_button.config(relief=tk.SUNKEN)
            # –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.large_image_canvas.pack_forget()
            self.scale_slider.set(100)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
            self.y_scrollbar.pack_forget()
            self.x_scrollbar.pack_forget()

            # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ canvas –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö
            self.large_image_canvas1_frame = Frame(self.large_image_frame)
            self.large_image_canvas2_frame = Frame(self.large_image_frame)
            

            # –ö–∞–Ω–≤–∞—Å—ã
            self.large_image_canvas1 = Canvas(
                self.large_image_canvas1_frame, width=500, height=400, highlightthickness=0
            )
            self.large_image_canvas2 = Canvas(
                self.large_image_canvas2_frame, width=500, height=400, highlightthickness=0
            )

            # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã –¥–ª—è –∫–∞–Ω–≤–∞—Å–æ–≤
            self.y_scrollbar1 = tk.Scrollbar(
                self.large_image_canvas1_frame, orient=tk.VERTICAL, command=self.sync_scroll1
            )
            self.y_scrollbar2 = tk.Scrollbar(
                self.large_image_canvas2_frame, orient=tk.VERTICAL, command=self.sync_scroll2
            )

            self.x_scrollbar1 = tk.Scrollbar(
                self.large_image_canvas1_frame, orient=tk.HORIZONTAL, command=self.sync_scroll_x1
            )
            self.x_scrollbar2 = tk.Scrollbar(
                self.large_image_canvas2_frame, orient=tk.HORIZONTAL, command=self.sync_scroll_x2
            )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å—ã
            self.large_image_canvas1.config(
                yscrollcommand=self.y_scrollbar1.set, xscrollcommand=self.x_scrollbar1.set
            )
            self.large_image_canvas2.config(
                yscrollcommand=self.y_scrollbar2.set, xscrollcommand=self.x_scrollbar2.set
            )

            # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–µ—Ä–≤–æ–º —Ñ—Ä–µ–π–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º grid
            self.large_image_canvas1.grid(row=0, column=0, sticky="nsew")
            self.y_scrollbar1.grid(row=0, column=1, sticky="ns")
            self.x_scrollbar1.grid(row=1, column=0, sticky="ew")

            self.large_image_canvas1_frame.grid_rowconfigure(0, weight=1)
            self.large_image_canvas1_frame.grid_columnconfigure(0, weight=1)

            # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ –≤—Ç–æ—Ä–æ–º —Ñ—Ä–µ–π–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º grid
            self.large_image_canvas2.grid(row=0, column=0, sticky="nsew")
            self.y_scrollbar2.grid(row=0, column=1, sticky="ns")
            self.x_scrollbar2.grid(row=1, column=0, sticky="ew")

            self.large_image_canvas2_frame.grid_rowconfigure(0, weight=1)
            self.large_image_canvas2_frame.grid_columnconfigure(0, weight=1)

            # –†–∞–∑–º–µ—â–∞–µ–º —Ñ—Ä–µ–π–º—ã –∫–∞–Ω–≤–∞—Å–æ–≤
            self.large_image_canvas1_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            self.large_image_canvas2_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –∫ –∫–∞–Ω–≤–∞—Å–∞–º
            self.large_image_canvas1.bind("<Double-Button-1>", self.on_double_click_canvas1)
            self.large_image_canvas2.bind("<Double-Button-1>", self.on_double_click_canvas2)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            self.large_image_canvas1.bind("<MouseWheel>", self.on_mouse_wheel_canvas1)
            self.large_image_canvas2.bind("<MouseWheel>", self.on_mouse_wheel_canvas2)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –∫ –∫–∞–Ω–≤–∞—Å–∞–º
            self.large_image_canvas1.bind("<Button-1>", self.on_single_click_canvas1)
            self.large_image_canvas2.bind("<Button-1>", self.on_single_click_canvas2)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–∞–Ω–≤–∞—Å–æ–≤
            self.next_canvas = 1
        else:
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            self.display_metadata({})
            # –ò–∑–º–µ–Ω—è–µ–º –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ç–∂–∞—Ç—É—é
            #self.select_multiple_button.config(relief=tk.RAISED)
            # –£–±–∏—Ä–∞–µ–º –∫–∞–Ω–≤–∞—Å—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            self.large_image_canvas1_frame.pack_forget()
            self.large_image_canvas2_frame.pack_forget()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.current_images = [None, None]
            self.current_image_paths = [None, None]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.y_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            self.x_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
            self.large_image_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            self.update_image(int(self.scale_slider.get()))  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def display_large_image(self, image_path):
        self.current_image_path = image_path
        self.current_image = Image.open(image_path)
        file_name = os.path.basename(image_path)
        self.file_name_label.config(text=file_name)

        if not self.first_image_displayed:
            if not self.multiple_pictures_mode:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                canvas_height = self.large_image_canvas.winfo_height()
                img_width, img_height = self.current_image.size
                height_scale = canvas_height / img_height
                initial_scale = height_scale * 100
                self.scale_slider.set(int(initial_scale))
            self.first_image_displayed = True

        if self.multiple_pictures_mode:
            # –í —Ä–µ–∂–∏–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –Ω–∞ –¥–≤—É—Ö –∫–∞–Ω–≤–∞—Å–∞—Ö
            if self.next_canvas == 1:
                self.current_images[0] = self.current_image
                self.current_image_paths[0] = self.current_image_path
                self.display_image_in_canvas(
                    self.current_image, self.large_image_canvas1, scale_value=int(self.scale_slider.get())
                )
                self.next_canvas = 2
            else:
                self.current_images[1] = self.current_image
                self.current_image_paths[1] = self.current_image_path
                self.display_image_in_canvas(
                    self.current_image, self.large_image_canvas2, scale_value=int(self.scale_slider.get())
                )
                self.next_canvas = 1
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º scrollregion –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            self.sync_scroll_regions()
        else:
            self.update_image(int(self.scale_slider.get()))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–∞–Ω–≤–∞—Å–µ
    def display_image_in_canvas(self, image, canvas, scale_value=100):
        scale_factor = int(float(scale_value)) / 100.0
        new_size = (
            int(image.size[0] * scale_factor),
            int(image.size[1] * scale_factor)
        )
        resized_image = image.resize(new_size, Image.LANCZOS)
        img_tk = ImageTk.PhotoImage(resized_image)
        canvas.delete("all")
        canvas.create_image(0, 0, anchor='nw', image=img_tk)
        canvas.image = img_tk
        canvas.config(scrollregion=canvas.bbox("all"))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
    def update_image(self, scale_value):
        if self.multiple_pictures_mode:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±–æ–∏—Ö –∫–∞–Ω–≤–∞—Å–∞—Ö
            scale_factor = int(float(scale_value)) / 100.0

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ large_image_canvas1 –∏ large_image_canvas2
            if hasattr(self, 'large_image_canvas1') and hasattr(self, 'large_image_canvas2'):
                for i, canvas in enumerate([self.large_image_canvas1, self.large_image_canvas2]):
                    if self.current_images[i]:
                        resized_image = self.current_images[i].resize(
                            (
                                int(self.current_images[i].size[0] * scale_factor),
                                int(self.current_images[i].size[1] * scale_factor)
                            ),
                            Image.LANCZOS
                        )
                        img_tk = ImageTk.PhotoImage(resized_image)
                        canvas.delete("all")
                        canvas.create_image(0, 0, anchor='nw', image=img_tk)
                        canvas.image = img_tk
                        canvas.config(scrollregion=canvas.bbox("all"))
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º scrollregion –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
                self.sync_scroll_regions()
            else:
                None
        else:
            if self.current_image:
                scale_factor = int(float(scale_value)) / 100.0
                new_size = (
                    int(self.current_image.size[0] * scale_factor),
                    int(self.current_image.size[1] * scale_factor)
                )
                resized_image = self.current_image.resize(new_size, Image.LANCZOS)
                img_tk = ImageTk.PhotoImage(resized_image)

                # –û—á–∏—â–∞–µ–º canvas –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if hasattr(self, 'large_image_canvas'):
                    self.large_image_canvas.delete("all")
                    self.large_image_canvas.create_image(0, 0, anchor='nw', image=img_tk)
                    self.large_image_canvas.image = img_tk
                    self.large_image_canvas.config(scrollregion=self.large_image_canvas.bbox("all"))
                else:
                    None


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
    def on_mouse_wheel(self, event):
        if event.state & 0x0001:  # –ï—Å–ª–∏ Shift –Ω–∞–∂–∞—Ç
            if event.delta > 0:
                self.large_image_canvas.xview_scroll(-1, "units")
            else:
                self.large_image_canvas.xview_scroll(1, "units")
        else:
            if event.delta > 0:
                self.large_image_canvas.yview_scroll(-1, "units")
            else:
                self.large_image_canvas.yview_scroll(1, "units")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –∫–∞–Ω–≤–∞—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    def on_mouse_wheel_canvas1(self, event):
        if event.state & 0x0001:  # –ï—Å–ª–∏ Shift –Ω–∞–∂–∞—Ç
            self.large_image_canvas1.xview_scroll(int(-1 * (event.delta / 120)), "units")
            self.sync_scroll_positions('canvas1', 'x')
        else:
            self.large_image_canvas1.yview_scroll(int(-1 * (event.delta / 120)), "units")
            self.sync_scroll_positions('canvas1', 'y')

    def on_mouse_wheel_canvas2(self, event):
        if event.state & 0x0001:  # –ï—Å–ª–∏ Shift –Ω–∞–∂–∞—Ç
            self.large_image_canvas2.xview_scroll(int(-1 * (event.delta / 120)), "units")
            self.sync_scroll_positions('canvas2', 'x')
        else:
            self.large_image_canvas2.yview_scroll(int(-1 * (event.delta / 120)), "units")
            self.sync_scroll_positions('canvas2', 'y')

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    def sync_scroll1(self, *args):
        self.large_image_canvas1.yview(*args)
        self.large_image_canvas2.yview_moveto(self.large_image_canvas1.yview()[0])
        self.y_scrollbar2.set(*self.large_image_canvas1.yview())

    def sync_scroll2(self, *args):
        self.large_image_canvas2.yview(*args)
        self.large_image_canvas1.yview_moveto(self.large_image_canvas2.yview()[0])
        self.y_scrollbar1.set(*self.large_image_canvas2.yview())

    def sync_scroll_x1(self, *args):
        self.large_image_canvas1.xview(*args)
        self.large_image_canvas2.xview_moveto(self.large_image_canvas1.xview()[0])
        self.x_scrollbar2.set(*self.large_image_canvas1.xview())

    def sync_scroll_x2(self, *args):
        self.large_image_canvas2.xview(*args)
        self.large_image_canvas1.xview_moveto(self.large_image_canvas2.xview()[0])
        self.x_scrollbar1.set(*self.large_image_canvas2.xview())

    def sync_scroll_positions(self, source_canvas, direction):
        if source_canvas == 'canvas1':
            if direction == 'y':
                pos = self.large_image_canvas1.yview()
                self.large_image_canvas2.yview_moveto(pos[0])
                self.y_scrollbar2.set(*pos)
            else:
                pos = self.large_image_canvas1.xview()
                self.large_image_canvas2.xview_moveto(pos[0])
                self.x_scrollbar2.set(*pos)
        else:
            if direction == 'y':
                pos = self.large_image_canvas2.yview()
                self.large_image_canvas1.yview_moveto(pos[0])
                self.y_scrollbar1.set(*pos)
            else:
                pos = self.large_image_canvas2.xview()
                self.large_image_canvas1.xview_moveto(pos[0])
                self.x_scrollbar1.set(*pos)

    def sync_scroll_regions(self):
        # Synchronize the scrollregion size
        region1 = self.large_image_canvas1.bbox("all")
        region2 = self.large_image_canvas2.bbox("all")
        
        # Check for None regions and handle accordingly
        if region1 is None and region2 is None:
            # Both canvases are empty; nothing to synchronize
            return
        elif region1 is None:
            # Canvas1 is empty; use region2 dimensions
            max_width = region2[2]
            max_height = region2[3]
        elif region2 is None:
            # Canvas2 is empty; use region1 dimensions
            max_width = region1[2]
            max_height = region1[3]
        else:
            # Both canvases have items; take the maximum dimensions
            max_width = max(region1[2], region2[2])
            max_height = max(region1[3], region2[3])

        # Update scrollregion for both canvases
        self.large_image_canvas1.config(scrollregion=(0, 0, max_width, max_height))
        self.large_image_canvas2.config(scrollregion=(0, 0, max_width, max_height))


    def on_mouse_wheel_scroll(self, event, canvas, scroll_direction):
        if event.delta > 0:
            canvas.yview_scroll(-1, "units") if scroll_direction == 'y' else canvas.xview_scroll(-1, "units")
        else:
            canvas.yview_scroll(1, "units") if scroll_direction == 'y' else canvas.xview_scroll(1, "units")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
    def on_double_click(self, event):
        if self.current_image_path:
            self.open_file(self.current_image_path)

    def on_double_click_canvas1(self, event):
        if self.current_image_paths[0]:
            self.open_file(self.current_image_paths[0])

    def on_double_click_canvas2(self, event):
        if self.current_image_paths[1]:
            self.open_file(self.current_image_paths[1])
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
    def open_file(self, file_path):
        file_path = file_path.replace('/', '\\')
        if os.path.exists(file_path):
            try:
                cmd = f'explorer "{file_path}"'
                subprocess.Popen(cmd)
            except Exception as e:
                print(f"Failed to open file '{file_path}': {e}")
        else:
            print(f"File '{file_path}' not found")

    def process_image_click(self, index):
        if self.current_image_paths[index]:
            image_path = self.current_image_paths[index]
            metadata = read_metadata_from_file(image_path)
            self.display_metadata(metadata)
            file_name = self.extract_file_name(image_path)
            self.file_name_label.config(text=file_name)

    def on_single_click(self, event):
        self.process_image_click(0)

    def on_single_click_canvas1(self, event):
        self.process_image_click(0)

    def on_single_click_canvas2(self, event):
        self.process_image_click(1)

    def extract_file_name(self, path):
        return os.path.basename(path)

            
    def display_metadata(self, metadata):
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.metadata_text.delete(1.0, tk.END)

        # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if metadata:
            metadata_text = "\n".join([f"{key}: {value}" for key, value in metadata.items()])
        else:
            metadata_text = ""

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.metadata_text.insert(tk.END, metadata_text)
        self.metadata_text.yview_moveto(0)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫ –Ω–∞—á–∞–ª—É

    def on_close(self):
        self.first_image_displayed = False
        self.current_image = None
        self.current_image_path = None
        self.current_images = [None, None]
        self.current_image_paths = [None, None]
        self.top.destroy()

    def open_results_folder(self):
        if os.path.exists(self.results_folder):
            subprocess.Popen(f'explorer "{os.path.abspath(self.results_folder)}"')
        else:
            print(f"Results folder '{self.results_folder}' not found")

    def remove_results(self):
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        dialog = FileDeletionDialog([self.results_folder])

        # –ñ–¥–µ–º, –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç
        dialog.wait_window(dialog)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ
        if dialog.deletion_done:
            self.on_close()


# Correspondence of data types and file extensions
data_types = {
    "region_data": "_locations",
    "stack_image": "_stack",
    "target_channel_image": "_synaptotag",
    "region_labels_image": "_with_roi",
    "filtered_image": "_denoised",
    "binary_masks_image": "_masks_roi_crop",
    "binary_mask": "_roi_mask",
    "binary_result_table": "_roi_result_table",
    "binary_summary_table": "_summary_roi_result_table",
    "histogram_image": "_hist",
    "histogram_data": "_histograms"
}
# Helper function to filter files by allowed data types
def filter_files_by_type(allowed_types, file_list):
    allowed_extensions = [data_types[dt] for dt in allowed_types]
    filtered_files = [file for file in file_list if any(ext in file for ext in allowed_extensions)]
    return filtered_files


def get_region_names(excel_paths):
    region_names = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    for excel_path in excel_paths:
        # Check if the Excel file exists
        if os.path.exists(excel_path):
            try:
                # Load the Excel file and sheet
                coords_df = pd.read_excel(excel_path, sheet_name='ROI_Coordinates')
                
                # Loop through every second column, assuming these are '_x' columns
                for col_x in coords_df.columns[::2]:  # Take every second column as '_x'
                    if '_x' in col_x:  # Ensure the column has '_x' in its name
                        location_name = col_x.rsplit('_', 1)[0]  # Extract the location name
                        region_names.add(location_name)  # Add to set to ensure uniqueness

            except Exception as e:
                print(f"Error loading regions from {excel_path}: {e}")
        else:
            print(f"Excel file does not exist: {excel_path}")

    # Return the unique region names as a sorted list
    return sorted(region_names)

# Example usage:
# excel_paths = ["/path/to/file1.xlsx", "/path/to/file2.xlsx"]
# region_names = get_region_names(excel_paths)
# print(region_names)



def delete_selected_regions(excel_paths, selected_regions):
    for excel_path in excel_paths:
        # Check if the Excel file exists
        if os.path.exists(excel_path):
            try:
                # Load the Excel file and sheet
                coords_df = pd.read_excel(excel_path, sheet_name='ROI_Coordinates')

                # Find columns to drop based on the selected regions
                columns_to_drop = []
                for region in selected_regions:
                    col_x = f"{region}_x"
                    col_y = f"{region}_y"
                    if col_x in coords_df.columns and col_y in coords_df.columns:
                        columns_to_drop.extend([col_x, col_y])  # Mark both '_x' and '_y' columns for deletion

                if columns_to_drop:
                    # Drop the selected columns
                    coords_df.drop(columns=columns_to_drop, inplace=True)

                    # Check if there are any remaining region columns (_x and _y)
                    remaining_region_columns = [
                        col for col in coords_df.columns if col.endswith('_x') or col.endswith('_y')
                    ]

                    if not remaining_region_columns:
                        # If no region columns are left, delete the Excel file
                        os.remove(excel_path)
                        print(f"Deleted file {excel_path} because no regions are left.")
                    else:
                        # Save the updated DataFrame back to the same Excel file
                        with pd.ExcelWriter(excel_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
                            coords_df.to_excel(writer, sheet_name='ROI_Coordinates', index=False)
                        print(f"Deleted regions {', '.join(selected_regions)} from {excel_path}")

                else:
                    print(f"No matching regions found in {excel_path}")

            except Exception as e:
                print(f"Error processing {excel_path}: {e}")
        else:
            print(f"Excel file does not exist: {excel_path}")

# File deletion dialog window
class FileDeletionDialog(tk.Toplevel):
    def __init__(self, folders):
        super().__init__()
        self.title("Delete Data")
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.geometry("600x600")
        self.resizable(False, False)
        self.iconbitmap(icon_path)
        
        self.folders = folders
        self.deletion_done = False  # Track if deletion happened
        self.all_selected = False  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏

        # Store checkbox states for each data type
        self.check_vars = {dt: tk.BooleanVar(value=False) for dt in data_types}  # Initially all unchecked
        self.region_check_var = tk.BooleanVar(value=False)  # Check state for "Region Data"
        self.all_regions_var = tk.BooleanVar(value=True)  # Check state for "all regions"
        self.all_files = self.get_all_files_in_folders()
        self.region_coordinate_files = filter_files_by_type(['region_data'], self.all_files)
        
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Select All / Deselect All
        self.select_button = Button(self, text="Select All", command=self.toggle_select_all)
        self.select_button.grid(row=0, column=0, pady=10)

        # Create checkboxes for each data type
        Checkbutton(self, text="Region Data", variable=self.region_check_var, onvalue=True, offvalue=False, command=self.toggle_region_options).grid(row=1, column=0, sticky="w")
        row = 2  # Start from row 1 for other data type checkboxes
        for dt, var in self.check_vars.items():
            if dt != "region_data":  # Skip "Region Data" since we handle it separately
                label = dt.replace("_", " ").title()  # Format label
                Checkbutton(self, text=label, variable=var, onvalue=True, offvalue=False).grid(row=row, column=0, sticky="w")
                row += 1

        # Create a Canvas to hold the "all regions" checkbox and the region list
        self.canvas = Canvas(self, highlightthickness=0)
        self.all_regions_cb = Checkbutton(self.canvas, text="all regions", variable=self.all_regions_var, onvalue=True, offvalue=False, command=self.toggle_region_list)
        self.all_regions_cb.grid(row=0, column=0, sticky="w")
        
        self.region_listbox = None
        self.scrollbar = None
        
        # Add the canvas, but hide it for now
        self.canvas.grid(row=1, column=1, sticky="w", pady=10)
        self.canvas.grid_remove()  # Hide it initially

        # Button to start deletion process
        Button(self, text="Delete Selected Data", command=self.confirm_delete).grid(row=row + 1, column=0, pady=10)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —á–µ—Ä–µ–∑ ThemeManager
        theme_manager = ThemeManager()
        theme_manager.apply_theme(self)
        
    def toggle_select_all(self):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–ª–∞–∂–∫–æ–≤"""
        if self.all_selected:
            # –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã, —Ç–æ —Å–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ–ª–∞–∂–∫–∏
            for var in self.check_vars.values():
                var.set(False)
            
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–∂–æ–∫ —Å "Region Data" –∏ —Å–∫—Ä—ã–≤–∞–µ–º canvas
            self.region_check_var.set(False)
            self.all_regions_var.set(False)
            self.canvas.grid_remove()  # –°–∫—Ä—ã–≤–∞–µ–º canvas
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "Select All"
            self.select_button.config(text="Select All")
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–ª–∞–∂–∫–∏
            for var in self.check_vars.values():
                var.set(True)
            
            # –í—ã–±–∏—Ä–∞–µ–º "Region Data" –∏ —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É –Ω–∞ "all regions"
            self.region_check_var.set(True)
            self.all_regions_var.set(True)
            self.canvas.grid()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º canvas
            self.hide_region_listbox()  # –£–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –µ—Å–ª–∏ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "Deselect All"
            self.select_button.config(text="Deselect All")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.all_selected = not self.all_selected

    def toggle_region_options(self):
        """ Show or hide the canvas with 'all regions' and listbox based on 'Region Data' selection """
        if self.region_check_var.get():
            self.canvas.grid()  # Show the canvas when Region Data is selected
            self.all_regions_var.set(True)  # Reset "all regions" checkbox to True
            self.hide_region_listbox()  # Hide the listbox if visible
        else:
            self.canvas.grid_remove()  # Hide the canvas when Region Data is unselected

    def toggle_region_list(self):
        """ Show or hide the region list based on 'all regions' checkbox """
        if not self.all_regions_var.get():
            self.show_region_listbox()
        else:
            self.hide_region_listbox()

    def show_region_listbox(self):
        """ Display the listbox for selecting specific regions inside the canvas """
        if not self.region_listbox:
            self.scrollbar = Scrollbar(self.canvas)
            self.scrollbar.grid(row=1, column=1, sticky="ns")
            self.region_listbox = Listbox(self.canvas, selectmode="multiple", yscrollcommand=self.scrollbar.set)
            self.region_listbox.grid(row=1, column=0, sticky="w")
            self.scrollbar.config(command=self.region_listbox.yview)
            
            # Add fictional region names to the listbox
            for region in get_region_names(self.region_coordinate_files):
                self.region_listbox.insert("end", region)
        else:
            self.region_listbox.grid(row=1, column=0, sticky="w")
            self.scrollbar.grid(row=1, column=1, sticky="ns")

    def hide_region_listbox(self):
        """ Hide the listbox and its scrollbar """
        if self.region_listbox:
            self.region_listbox.grid_remove()
        if self.scrollbar:
            self.scrollbar.grid_remove()

    def confirm_delete(self):
        """ Ask the user to confirm deletion and delete selected files/regions """
        # List of selected data types
        selected_data_types = [dt for dt, var in self.check_vars.items() if var.get()]
        
        if self.region_check_var.get():
            selected_data_types.append("region_data")
        
        if not selected_data_types:
            messagebox.showwarning("Error", "No data types selected for deletion.")
            return
        
        # Confirmation dialog before deleting
        answer = messagebox.askyesno(
            "Delete Confirmation",
            "Are you sure you want to delete selected data?"
        )
        if answer:
            self.delete_files(selected_data_types)

    def delete_files(self, selected_data_types):
        
        files_to_delete = filter_files_by_type(selected_data_types, self.all_files)
        self.deletion_done = True  # Mark deletion as done
        
        for file in files_to_delete:
            if data_types["region_data"] in file:
                # Handle region-specific deletion if "all regions" is not selected
                if not self.all_regions_var.get() and self.region_listbox:
                    selected_regions = [self.region_listbox.get(i) for i in self.region_listbox.curselection()]
                    if selected_regions:
                        delete_selected_regions([file], selected_regions)
                        continue
            try:
                os.remove(file)
                print(f"Deleted file: {file}")
            except Exception as e:
                print(f"Error deleting file {file}: {e}")
        
        messagebox.showinfo("Deletion Complete", "The selected data have been deleted.")
        self.destroy()

    def get_all_files_in_folders(self):
        all_files = []
        for folder in self.folders:
            if not os.path.exists(folder):
                print(f"Folder does not exist, skipping: {folder}")
                continue
            for dirpath, _, filenames in os.walk(folder):
                for file in filenames:
                    all_files.append(os.path.join(dirpath, file))
        return all_files

# Example usage:
# dialog = FileDeletionDialog(folders=["/path/to/folder1", "/path/to/folder2"])
# dialog.mainloop()

def create_metadata_text_field(parent_frame, width=50, height=5):
    """
    Creates a text box to display metadata with vertical scrolling.

    :param parent_frame: the parent frame in which the text field will be placed
    :param width: width of the text field in characters
    :param height: height of the text field in lines
    :return: tuple (text field, scrollbar)
    """
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    metadata_text = tk.Text(
        parent_frame,
        width=width,   # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        height=height,  # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        wrap='word'  # –ü–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ —Ä–∞–º–∫–∏
    )
    #metadata_text.pack(side=tk.LEFT, padx=10, pady=5)

    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä
    metadata_scrollbar = tk.Scrollbar(
        parent_frame,
        orient=tk.VERTICAL,
        command=metadata_text.yview
    )
    #metadata_scrollbar.pack(side=tk.LEFT, fill=tk.Y)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
    metadata_text.config(yscrollcommand=metadata_scrollbar.set)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
    return metadata_text, metadata_scrollbar

   

class ThemeManager:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(ThemeManager, cls).__new__(cls)
            cls._instance.style = None  # –°—é–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Å—Ç–∏–ª—å
        return cls._instance

    def apply_theme(self, widget):
        if self.style:
            theme_background = self.style.lookup('TFrame', 'background')
            theme_font = self.style.lookup('TLabel', 'font')
            theme_foreground = self.style.lookup('TLabel', 'foreground')

            def update_widget_appearance(w):
                try:
                    w.configure(bg=theme_background)
                except tk.TclError:
                    pass

                try:
                    w.configure(font=theme_font, fg=theme_foreground)
                except (tk.TclError, AttributeError):
                    pass

                for child in w.winfo_children():
                    update_widget_appearance(child)

            update_widget_appearance(widget)

    def set_style(self, style):
        self.style = style

    def get_theme_background(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã."""
        if self.style:
            return self.style.lookup('TFrame', 'background')
        return None  # –í–µ—Ä–Ω–µ–º None, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    def get_theme_highlight(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–µ–º—ã (focuscolor), –ª–∏–±–æ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞."""
        if self.style:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (focuscolor)
            highlight_color = self.style.lookup('TButton', 'focuscolor')
            if highlight_color:
                return highlight_color
            
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∏–Ω–≤–µ—Ä—Å–∏—é
            background_color = self.get_theme_background()
            if background_color:
                return self.invert_color(background_color)
            
        return "#FFFFFF"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    @staticmethod
    def invert_color(color):
        try:
            color = color.lstrip('#')
            if len(color) != 6:
                return color
            rgb = tuple(int(color[i:i+2], 16) for i in (0, 2, 4))
            inverted_rgb = tuple(255 - c for c in rgb)
            return '#{:02x}{:02x}{:02x}'.format(*inverted_rgb)
        except (ValueError, TypeError):
            return color


import tkinter as tk

def initialize_window(root, title, width, height, resizable=False, icon_path=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞ —Å –æ–±—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    :param root: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–æ–±—ã—á–Ω–æ `Tk()` –∏–ª–∏ `Toplevel()`).
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
    :param width: –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞.
    :param height: –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞.
    :param resizable: –ï—Å–ª–∏ False, –æ–∫–Ω–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É.
    :param icon_path: –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –æ–∫–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å.
    :return: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ.
    """
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    window = tk.Toplevel(root)
    window.title(title)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞
    x = (screen_width // 2) - (width // 2)
    y = (screen_height // 2) - (height // 2)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
    window.geometry(f"{width}x{height}+{x}+{y}")
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if not resizable:
        window.resizable(False, False)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
    if icon_path:
        window.iconbitmap(icon_path)
    
    return window

import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, messagebox
from readlif.reader import LifFile
import numpy as np
from PIL import Image
import os
import platform
import subprocess

class LifFileConversion(tk.Toplevel):
    def __init__(self):
        super().__init__()
        self.title("Convert LIF Image")
        # Center the window
        self.geometry("300x300")
        self.resizable(False, False)
        self.center_window()

        # Initialize variables
        self.file_paths = []
        self.target_ch = tk.IntVar(value=0)
        self.output_dirs = set()  # Set to store output directories

        # Create UI elements
        self.create_widgets()

    def center_window(self):
        self.update_idletasks()
        width = 300
        height = 300
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def create_widgets(self):
        # Button to select files
        select_files_button = ttk.Button(self, text="Select LIF Files", command=self.select_files)
        select_files_button.pack(pady=10)

        # Entry to select target channel
        target_ch_label = ttk.Label(self, text="Target Channel:")
        target_ch_label.pack()
        target_ch_spinbox = ttk.Spinbox(self, from_=0, to=10, textvariable=self.target_ch)
        target_ch_spinbox.pack(pady=5)

        # Button to start conversion
        convert_button = ttk.Button(self, text="Start Conversion", command=self.start_conversion)
        convert_button.pack(pady=10)

        # Progress bars without labels
        progress_frame = ttk.Frame(self)
        progress_frame.pack(pady=10)

        self.file_progress = ttk.Progressbar(progress_frame, orient='horizontal', length=200, mode='determinate')
        self.file_progress.pack(pady=5)

        self.image_progress = ttk.Progressbar(progress_frame, orient='horizontal', length=200, mode='determinate')
        self.image_progress.pack(pady=5)

    def select_files(self):
        file_paths = filedialog.askopenfilenames(title="Select LIF Files", filetypes=[("LIF files", "*.lif")])
        if file_paths:
            self.file_paths = self.tk.splitlist(file_paths)
            # Bring the main window to the front after file selection
            self.lift()
            self.focus_force()
            # Message about the number of selected files has been removed

    def start_conversion(self):
        if not self.file_paths:
            messagebox.showwarning("No Files Selected", "Please select LIF files to convert.")
            return
        target_ch = self.target_ch.get()
        if target_ch < 0:
            messagebox.showwarning("Invalid Channel", "Please enter a valid target channel number.")
            return

        # Initialize progress bars
        self.file_progress['maximum'] = len(self.file_paths)
        self.file_progress['value'] = 0
        self.image_progress['value'] = 0
        self.update_idletasks()

        # Clear the output directories set
        self.output_dirs.clear()

        # Start conversion process
        for file_index, file_path in enumerate(self.file_paths, start=1):
            try:
                self.convert_lif_to_tif(file_path, target_ch)
            except Exception as e:
                messagebox.showerror("Conversion Error", f"An error occurred while converting {os.path.basename(file_path)}:\n{e}")
            # Update file progress bar
            self.file_progress['value'] = file_index
            self.update_idletasks()

        # After conversion, offer to open the output directories
        if messagebox.askyesno("Conversion Complete", "All files have been converted.\nDo you want to open the folder(s) containing the results?"):
            for directory in self.output_dirs:
                self.open_folder(directory)

    def convert_lif_to_tif(self, file_path, target_ch):
        lif = LifFile(file_path)
        img_list = [i for i in lif.get_iter_image()]
        # Initialize image progress bar for this file
        self.image_progress['maximum'] = len(img_list)
        self.image_progress['value'] = 0
        self.update_idletasks()

        for im_index, im_in in enumerate(img_list, start=1):
            z_list = [i for i in im_in.get_iter_z(t=0, c=0)]
            z_n = len(z_list)  # Number of depths
            channel_list = [i for i in im_in.get_iter_c(t=0, z=0)]
            ch_n = len(channel_list)  # Number of channels

            frames = self.collect_lif_frames(im_in, target_ch, z_n, ch_n)
            # Save frames to multi-layered TIFF
            output_path = self.get_output_path(file_path, target_ch, im_index)
            self.save_frames_as_tiff(frames, output_path)
            # Add the output directory to the set
            output_dir = os.path.dirname(output_path)
            self.output_dirs.add(output_dir)
            # Update image progress bar
            self.image_progress['value'] = im_index
            self.update_idletasks()

    def collect_lif_frames(self, im_in, ch, z_n, ch_n):
        def remove_shift(lst, ch):
            shift = ((ch_n - 1) * ch - 1) % len(lst)
            reverse_shift = len(lst) - shift
            return lst[reverse_shift:] + lst[:reverse_shift]

        ch = (ch_n - ch)

        frames_out = []
        for z_real in list(range(z_n)):
            z = (z_real * ch_n) % z_n
            c = (z % ch_n + ch) % ch_n
            frames_out.append(np.array(im_in.get_frame(z=z, c=c)))
        frames_out = np.array(remove_shift(frames_out, ch))

        return frames_out

    def get_output_path(self, file_path, target_ch, im_index):
        base, ext = os.path.splitext(file_path)
        output_path = f"{base}ch{target_ch}im{im_index}.tif"
        return output_path

    def save_frames_as_tiff(self, frames, output_path):
        # Convert frames to PIL Images and save as multi-page TIFF
        frames = frames.astype(np.uint16)  # Ensure frames are in appropriate format
        images = [Image.fromarray(frame) for frame in frames]
        images[0].save(output_path, save_all=True, append_images=images[1:], compression="tiff_deflate")

    def open_folder(self, path):
        # Open the folder in the file explorer
        if platform.system() == "Windows":
            os.startfile(path)
        elif platform.system() == "Darwin":  # macOS
            subprocess.Popen(["open", path])
        else:  # Linux and other systems
            subprocess.Popen(["xdg-open", path])

def run_lif_file_conversion_dialog():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    app = LifFileConversion()
    app.mainloop()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
icon_path = os.path.join(current_dir, "images", "synaptocatcher.ico")

